#!/usr/bin/env ruby
#
# For documentation please sea man git-backup(1)
#
# TODO:
# - check the standard format of git warnings to be conform
# - do better checking for git repo than calling git status
# - if multiple entries found in config file, specify which file
# - make it work with submodules
# - manpage
# - automatic installer or inclusion in git
# - propose to make backup directory if it does not exists
# - depth feature in git config (eg. only keep 3 backups for a repo - like rotate...)
# - TESTING




# globals:

GIT_DIR_NAME    = '.git'          # just to avoid magic "strings"
FILENAME_SUFFIX = ".git.bundle"   # will be added to the filename of the created backup



# The original script refused to run unless it was called directly. I don't know why. Personally I would remove this
if __FILE__ != $0

	puts 'fatal: script not called directly. Currently not supported'
	exit 1

end



# Test if we are inside a git repo

`git status 2>&1`

if $?.exitstatus != 0

	puts 'fatal: Not a git repository: .git or at least cannot get zero exit status from "git status"'
	exit 2


else # git status success

	until    	 File::directory?( Dir.pwd + '/' + GIT_DIR_NAME )             \
				or  File::directory?( Dir.pwd                      ) == '/'


			Dir.chdir( '..' )
	end


	unless File::directory?( Dir.pwd + '/.git' )

		raise( 'fatal: Directory still not a git repo: ' + Dir.pwd )

	end

end


# git-config --get of version 1.7.10 does:
#
# if the key does not exist git config exits with 1
# if the key exists twice in the same file   with 2
# if the key exists exactly once             with 0
#
# if the key does not exist       , an empty string is send to stdin
# if the key exists multiple times, the last value  is send to stdin
# if exaclty one key is found once, it's value      is send to stdin
#


# get the setting for the backup directory
# ----------------------------------------

directory = `git config --get backup.directory`


# git config adds a newline, so remove it

directory.chomp!


# check exit status of git config

case $?.exitstatus

	when 1 :	directory = Dir.pwd[ /(.+)\/[^\/]+/, 1]

				puts 'Warning: Could not find backup.directory in your git config file. Please set it. See "man git config" for more details on git configuration files. Defaulting to the same directroy your git repo is in: ' + directory

	when 2 :	puts 'Warning: Multiple entries of backup.directory found in your git config file. Will use the last one: ' + directory

	else     unless $?.exitstatus == 0 then raise( 'fatal: unknown exit status from git-config: ' + $?.exitstatus ) end

end


# verify directory exists

unless File::directory?( directory )

	raise( 'fatal: backup directory does not exists: ' + directory )

end


unless directory =~ /\/$/

	directory += '/'

end


# The date and time prefix
# ------------------------

prefix           = ''
prefix_date      = Time.now.strftime( '%F'       ) + ' - ' # %F = YYYY-MM-DD
prefix_time      = Time.now.strftime( '%H:%M:%S' ) + ' - '
add_date_default = true
add_time_default = false


# get the setting for the prefix-date from git config

add_date = `git config --get backup.prefix-date`


# check exit status of git config

case $?.exitstatus

	# when not set
	when 1 : prefix += prefix_date if add_date_default

	when 0 : prefix += prefix_date unless add_date =~ /(false|no|0)/i

	when 2 : prefix += prefix_date unless add_date =~ /(false|no|0)/i
				puts 'Warning: Multiple entries of backup.prefix-date found in your git config file. Will use the last one: ' + add_date

	else     raise( 'fatal: unknown exit status from git-config: ' + $?.exitstatus )

end




# get the setting for the prefix-time from git config

add_time = `git config --get backup.prefix-time`


# check exit status of git config

case $?.exitstatus

	# when not set
	when 1 : prefix += prefix_time if add_time_default

	when 0 : prefix += prefix_time unless add_time =~ /(false|no|0)/i

	when 2 : prefix += prefix_time unless add_time =~ /(false|no|0)/i
				puts 'Warning: Multiple entries of backup.prefix-time found in your git config file. Will use the last one: ' + add_time

	else     raise( 'fatal: unknown exit status from git-config: ' + $?.exitstatus )

end





# default bundle name is the name of the repo
# do we really need .chomp?
bundle_name = Dir.pwd.split('/').last.chomp

# set the name of the file to the first command line argument if given
bundle_name = ARGV[0] if( ARGV[0] )


bundle_name = directory + prefix + bundle_name + FILENAME_SUFFIX


puts "Backing up to bundle \"#{bundle_name}\""


# git bundle will print it's own error messages if it fails
`git bundle create "#{bundle_name}" --all --remotes`


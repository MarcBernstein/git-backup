#!/usr/bin/env ruby
#
# For documentation please sea man git-backup(1)
#
# TODO:
# - make it a class rather than a function
# - check the standard format of git warnings to be conform
# - do better checking for git repo than calling git status
# - if multiple entries found in config file, specify which file
# - make it work with submodules
# - propose to make backup directory if it does not exists
# - depth feature in git config (eg. only keep 3 backups for a repo - like rotate...)
# - take cmd line arguments as function parameters in order to be able to be called from other scripts. actually make git backup a class
# - TESTING

require "getoptlong"

# allow calling from other scripts
def git_backup

puts "\n"

# constants:
git_dir_name    = '.git'          # just to avoid magic "strings"
filename_suffix = '.git-bundle'   # will be added to the filename of the created backup

repo_dir        = nil
call_dir        = Dir.getwd()

arguments       = parse_command_line()

# Test if we are inside a git repo
`git status 2>&1`

if $?.exitstatus != 0

   puts 'fatal: Not a git repository: .git or at least cannot get zero exit status from "git status"'
   exit 2


else # git status success

   until     File::exists?( Dir.getwd + '/' + git_dir_name ) \
			or  Dir.getwd == '/'


		 Dir.chdir( '..' )
   end


   unless File::exists?( Dir.getwd + '/' + git_dir_name )

	  raise( 'fatal: Directory still not a git repo: ' + Dir.getwd )

   end

end

# store the repo directory for later
repo_dir = Dir.getwd


# git-config --get of version 1.7.10 does:
#
# if the key does not exist git config exits with 1
# if the key exists twice in the same file   with 2
# if the key exists exactly once             with 0
#
# if the key does not exist       , an empty string is send to stdin
# if the key exists multiple times, the last value  is send to stdin
# if exaclty one key is found once, it's value      is send to stdin
#


# get the setting for the backup directory
# ----------------------------------------

if arguments[ "directory" ] == nil

	# git config adds a newline, so remove it
	#
	directory = `git config --get backup.directory`.chomp!


	# check exit status of git config
	case $?.exitstatus

	   when 1 then directory = File.dirname( Dir.getwd )

						puts "Warning: Could not find backup.directory in your git config file. Please set it.\n         See \"man git config\" for more details on git configuration files.\n         Defaulting to the same directroy your git repo is in: #{directory}\n\n"

	   when 2 then puts 'Warning: Multiple entries of backup.directory found in your git config file. Will use the last one: ' + directory

	   else        unless $?.exitstatus == 0 then raise( 'fatal: unknown exit status from git-config: ' + $?.exitstatus ) end

	end


else

	# TODO: error handling and validation. Security
	# absolute path
	#
	if( arguments[ "directory" ][ /^\// ] )

		directory = arguments[ "directory" ]


	# relative path
	#
	else

		directory = Dir.glob( call_dir + '/' + arguments[ "directory" ] )[ 0 ]


		if directory === nil

			raise( "No such directory: #{arguments[ "directory" ].inspect} in current working directory: #{call_dir.inspect}" )

		end

	end

end


# verify directory exists
unless File::directory?( directory )

   raise( 'fatal: backup directory does not exists: "' + directory + '"' )

end


# The date and time prefix
# ------------------------

prefix           = ''
prefix_date      = Time.now.strftime( '%F'       ) + ' - ' # %F = YYYY-MM-DD
prefix_time      = Time.now.strftime( '%H:%M:%S' ) + ' - '
add_date_default = true
add_time_default = false

prefix += prefix_date if git_config_bool( 'backup.prefix-date', add_date_default )
prefix += prefix_time if git_config_bool( 'backup.prefix-time', add_time_default )


# be sure to be in the right dir
Dir::chdir( repo_dir )

# default bundle name is the name of the repo
bundle_name = Dir.getwd.split( '/' ).last

# set the name of the file to the first command line argument if given
bundle_name = arguments[ "filename" ] if( arguments[ "filename" ] )

bundle_name = File::join( directory, prefix + bundle_name + filename_suffix )

puts "Backing up to bundle: #{bundle_name.inspect}\n\n"

# git bundle will print it's own error messages if it fails
`git bundle create #{bundle_name.inspect} --all --remotes`

puts "\n"
end # def git_backup



# helper function to call git config to retrieve a boolean setting
def git_config_bool( option, default_value )

   # get the setting for the prefix-time from git config
   config_value = `git config --get #{option.inspect}`

   # check exit status of git config
   case $?.exitstatus

	  # when not set take default
	  when 1 then return default_value

	  when 0 then return true unless config_value =~ /(false|no|0)/i

	  when 2 then puts 'Warning: Multiple entries of #{option.inspect} found in your git config file. Will use the last one: ' + config_value
				  return true unless config_value =~ /(false|no|0)/i

	  else        raise( 'fatal: unknown exit status from git-config: ' + $?.exitstatus )

   end
end



def parse_command_line()

	parser = GetoptLong.new

	parser.set_options(

		[ "-h", "--help"     , GetoptLong::NO_ARGUMENT       ] ,
		[ "-d", "--directory", GetoptLong::REQUIRED_ARGUMENT ] ,
		[ "-f", "--filename" , GetoptLong::REQUIRED_ARGUMENT ]

	)


	directory = nil
	filename  = nil


	loop do

		begin

			opt, arg = parser.get

			break if not opt

			# Only for debugging purposes...
			# puts( opt + " => " + arg )


			case opt

				when "-h"

					puts "\nUsage: ..."
					puts "       run from within a git repository to back it up to a bundle. Run 'man git backup' for more details.\n\n"
					exit 0


				when "-d"

					directory = arg


				when "-f"

					filename = arg

			end


		rescue => err

			puts err
			break

		end

	end


	return \
	{
		"filename"  => filename   ,
		"directory" => directory
	}

end

# function needs to be called if we are not included in another script
git_backup if __FILE__ == $0

